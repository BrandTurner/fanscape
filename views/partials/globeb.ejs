<!DOCTYPE HTML>
<html lang="en">
  <head>
    <title>FanScape - Beta</title>
    <meta charset="utf-8">
    <link rel="stylesheet" type="text/css" href="../../views/css/style.css" media="all">
    <link rel="stylesheet" type="text/css" href="../../views/css/layout.css" media="all">
    <script type="text/javascript" src="//use.typekit.net/hto8ggy.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
  </head>
  <body>

  <div id="container"></div>
    <div class="titleWrap2">
      <span id="title2">FanScape</span>
    </div>

  <script type="text/javascript" src="/node_modules/jquery/dist/jquery.min.js"></script>
  <script type="text/javascript" src="/views/js/jquery.knob.js"></script>
  <script type="text/javascript" src="/views/third-party/Detector.js"></script>
  <script type="text/javascript" src="/views/third-party/three.min.js"></script>
  <script type="text/javascript" src="/views/third-party/Tween.js"></script>
  <script type="text/javascript" src="/views/js/globe.js"></script>
  <script type='text/javascript' src='https://cdn.firebase.com/js/client/1.0.15/firebase.js'></script>

  <div id="toHide">
    <script type="text/javascript">

      /////////////////////////////////////////
      // TODO
      // figure out a better way to store data and make sure that magnitude is accurate and live
      // Implement a date picker function
      // Implement a status bar for the gathering of followers
      // add authentication for Instagram
      /////////////////////////////////////////

      // Variable to hold data
      var userName;  // holds the user name on retrieval
      var cleanSnapshot;  // holds on start a copy of the data on Firebase
      var geoTaggedFollowersCount = 0;  // keeps a tally on the number of followers that has geotagged data
      var todayUserData = [];  // from the snapshot retrieves existing data if any

      var userGeoData = [];

      // Loads a globe
      var container = document.getElementById( 'container' );  // Where to put the globe?
      var globe = new DAT.Globe( container );  // Make the globe
      globe.createPoints();  // Create the geometry
      globe.animate();  // Begin animation

      var clearScene = function() {
        var objsToRemove = _.rest(globe.scene.children, 2);
        _.each(objsToRemove, function( object ) {
              globe.scene.remove(object);
        });
      };

      // takes obj Data and filters it down to an array that has an averaged out magnitude
      var crossRef = function(data, magnitude){
        var result = [];
        var obj = {};

        for (var i = 0; i < data.length; i++) {
          var pair = JSON.stringify([(data[i]),(data[i+1])]);

          if (obj[pair]){
            obj[pair] = obj[pair] + magnitude;
          } else {
            obj[pair] = magnitude;
          }
          i++;
          i++;
        };

        for(var i in obj){
          var temp = JSON.parse(i);
          temp.push(obj[i]);
          result = result.concat(temp);
        };

        return result;
      }

      // start Firebase lookup and initiation if needed
      var runFirebase = function(){
        var fa = new Firebase('https://fanscape.firebaseio.com/'+userName+'/geoData/');
        var fb = new Firebase('https://fanscape.firebaseio.com/');

        // opens a live feed to Firebase and listens for new child + add those live.
        var goLive = function(){
          // console.log("going Live");
          var totalFollowers = 0;

          fa.once('value', function(data){
            var theData = data.val();
            if(theData){
              if(theData.followers){
                totalFollowers = theData.followers.totalFollowers;
                console.log(totalFollowers, "total followers");
              }
            }
          });

          fa.on('child_changed', function(childSnapshot){
            // console.log("something happened");
            var followersData = childSnapshot.val();
            console.log(followersData, "followersData");

            if(followersData.totalFollowers){
              if(followersData.totalFollowers === followersData.followersDone ){
                Firebase.goOffline()
                console.log("Went Offline!");
              }
            }

            if (followersData.data){
              for (var i in followersData.data) {
                if(followersData.data[i]){
                  var rawData = followersData.data[i];
                  userGeoData = userGeoData.concat(rawData);
                }
              }
              console.log(userGeoData, "result array");
              clearScene();
              globe.addData(crossRef(userGeoData, 0.005), {format: 'magnitude'});
              globe.createPoints();
              // globe.animate();
            }

          });
        };

        // check for existing data
        fb.once('value', function(dataSnapshot){

          var fbSnapshot = dataSnapshot;  // extract data from Firebase in the form of a snapshot
          var cleanSnapshot = fbSnapshot.val();  //converts Firebase snapshot into readable data

          // check snapshot for data
          if(cleanSnapshot){
            // check snapshot for existing userName
            if(cleanSnapshot[userName]){
              // check snapshot for existing locations
              if(cleanSnapshot[userName].geoData){
                //sort through the extracted data and get each followers.
                for (var i in cleanSnapshot[userName].geoData){
                  if(cleanSnapshot[userName].geoData[i].status){
                    geoTaggedFollowersCount++;  // Keep track of the number of followers with geo tagged data.
                    fb.child(userName).child('geoData').child('followers').update({'followersDone': (geoTaggedFollowersCount)});
                    for (var j in cleanSnapshot[userName].geoData[i].data){
                      todayUserData = todayUserData.concat(cleanSnapshot[userName].geoData[i].data[j]);
                    }
                  }
                }

                // take the gathered and ordered data and filter through it to determine the magnitude
                // then inject it back into the globe
                globe.addData(crossRef(todayUserData, 0.005), {format: 'magnitude'});
                globe.createPoints();
                // globe.animate();
                goLive();
                console.log("gone live");

              // if no status then that means that the data has not completely downloaded
              } else {
                // opens a listening port to Firebase to update data on the globe.
                goLive();
              }
            } else {
              // opens a listening port to Firebase to update data on the globe.
              goLive();
            }
          } else {
            // opens a listening port to Firebase to update data on the globe.
            goLive();
          }
        });
      }

      // reads from the URL the current userName and stores it
      var urlPath = window.location.href;
      var urlArray = urlPath.split("=");
      userName = urlArray[1];

      runFirebase();

      // hides all the script from DOM
      $( document ).ready(function() {
        $( '#toHide' ).remove();
      });
    </script>
  </div>

  <script type="text/javascript" src="../../views/js/underscore.js"></script>
  </body>

</html>
