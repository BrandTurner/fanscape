<!DOCTYPE HTML>
<html lang="en">
  <head>
    <title>FanScape - Beta</title>
    <meta charset="utf-8">
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
        <!--[if IE]><script type="text/javascript" src="../../excanvas.js"></script><![endif]-->

        <script src="../../views/js/jquery.knob.js"></script>
        <script>
            $(function($) {

                $(".knob").knob({
                    change : function (value) {
                        //console.log("change : " + value);
                    },
                    release : function (value) {
                        //console.log(this.$.attr('value'));
                        console.log("release : " + value);
                    },
                    cancel : function () {
                        console.log("cancel : ", this);
                    },
                    /*format : function (value) {
                        return value + '%';
                    },*/
                    draw : function () {

                        // "tron" case
                        if(this.$.data('skin') == 'tron') {

                            this.cursorExt = 0.3;

                            var a = this.arc(this.cv)  // Arc
                                , pa                   // Previous arc
                                , r = 1;

                            this.g.lineWidth = this.lineWidth;

                            if (this.o.displayPrevious) {
                                pa = this.arc(this.v);
                                this.g.beginPath();
                                this.g.strokeStyle = this.pColor;
                                this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, pa.s, pa.e, pa.d);
                                this.g.stroke();
                            }

                            this.g.beginPath();
                            this.g.strokeStyle = r ? this.o.fgColor : this.fgColor ;
                            this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, a.s, a.e, a.d);
                            this.g.stroke();

                            this.g.lineWidth = 2;
                            this.g.beginPath();
                            this.g.strokeStyle = this.o.fgColor;
                            this.g.arc( this.xy, this.xy, this.radius - this.lineWidth + 1 + this.lineWidth * 2 / 3, 0, 2 * Math.PI, false);
                            this.g.stroke();

                           $(this.i).val(this.cv + '%') //Puts a percent after values

                            return false;


                        }
                    }
                });

                // Example of infinite knob, iPod click wheel
                var v, up=0,down=0,i=0
                    ,$idir = $("div.idir")
                    ,$ival = $("div.ival")
                    ,incr = function() { i++; $idir.show().html("+").fadeOut(); $ival.html(i); }
                    ,decr = function() { i--; $idir.show().html("-").fadeOut(); $ival.html(i); };
                $("input.infinite").knob(
                                    {
                                    min : 0
                                    , max : 255
                                    , stopper : false
                                    , change : function () {
                                                    if(v > this.cv){
                                                        if(up){
                                                            decr();
                                                            up=0;
                                                        }else{up=1;down=0;}
                                                    } else {
                                                        if(v < this.cv){
                                                            if(down){
                                                                incr();
                                                                down=0;
                                                            }else{down=1;up=0;}
                                                        }
                                                    }
                                                    v = this.cv;
                                                }
                                    });
            });
        </script>
    <link rel="stylesheet" type="text/css" href="../../views/css/style.css" media="all">
    <link rel="stylesheet" type="text/css" href="../../views/css/layout.css" media="all">
    <script type="text/javascript" src="//use.typekit.net/hto8ggy.js"></script>
    <script type="text/javascript">try{Typekit.load();}catch(e){}</script>
  </head>
  <body>

<div id="logout" onclick="location.href='https://instagram.com/accounts/logout';" style="cursor: pointer;">
  <div class="LOinstaStripe" style="background-color: #e11138; border-radius: 4px 0 0 4px; width: 5px;"></div>
  <div class="LOinstaStripe" style="background-color: #edc130;"></div>
  <div class="LOinstaStripe" style="background-color: #6cbf93;"></div>
  <div class="LOinstaStripe" style="background-color: #3e9be5; border-radius: 0 2px 2px 0;"></div>
  <div class="LOtagLineWrap">
    <span id="LOtagLine">Sign Out</span>
  </div>
</div>

  <div id="container"></div>
  <div class="titleWrap2">
    <span id="title2">FanScape</span>
  </div>

  <div id="userProfile">
    <div id='follower'>
    <!-- readonly="false" -->
      <input class="knob" data-thickness=".1" data-skin="tron" data-readOnly="true" data-width="120" data-min="0" data-max="100" data-displayPrevious=false data-angleOffset=-125 data-angleArc=250 data-fgColor="rgba(255, 255, 255, 0.5)" value="0">
      <div id="followersInfo">
        <span id="followerDoneCount">#</span><span> followers done</span>
      </div>
    </div>

    <div id='user'>
      <img src="/views/img/profile_blank_gray.jpg"><span>user name</span>
    </div>
  </div>

  <script type="text/javascript" src="/views/third-party/Detector.js"></script>
  <script type="text/javascript" src="/views/third-party/three.min.js"></script>
  <script type="text/javascript" src="/views/third-party/Tween.js"></script>
  <script type="text/javascript" src="/views/js/globe.js"></script>
  <script type='text/javascript' src='https://cdn.firebase.com/js/client/1.0.15/firebase.js'></script>

  <div id="toHide">
    <script type="text/javascript">

      //////////////////////////////////////////////////////////////////////////////////
      // TODO
      // Optimize code so that it does not crash!
      // Implement a date picker function
      //////////////////////////////////////////////////////////////////////////////////

  // Variable to hold data
  var cleanSnapshot,  // holds on start a copy of the data on Firebase
      geoTaggedFollowersCount = 0,  // keeps a tally on the number of followers that has geotagged data
      todayUserData = [],  // from the snapshot retrieves existing data if any
      getProfile = false,
      totalFollowers,
      followersDone,
      percenteage;

  // reads from the URL the current userName and stores it
  var urlPath           = window.location.href,
      tempTupple        = urlPath.split("&"),
      tempUser          = tempTupple[0].split("="),
      tempId            = tempTupple[1].split("="),
      userName          = tempUser[1],
      id                = tempId[1];


      // Loads a globe
      var container = document.getElementById( 'container' );  // Where to put the globe?
      var globe = new DAT.Globe( container );  // Make the globe
      globe.createPoints();  // Create the geometry
      globe.animate();  // Begin animation

      // removes spikes from globe
      var clearScene = function() {
        var objsToRemove = _.rest(globe.scene.children, 2);
        _.each(objsToRemove, function( object ) {
              globe.scene.remove(object);
        });
      };

      // start Firebase lookup and initiation if needed
      var runFirebase = function(){
        var fa = new Firebase('https://fanscape.firebaseio.com/');
        var fb = new Firebase('https://fanscape.firebaseio.com/'+userName+'/pureData');
        var fc = new Firebase('https://fanscape.firebaseio.com/'+userName+'/userData');

        // opens a live feed to Firebase and listens for new child + add those live.
        var goLive = function(){

          fb.on('child_changed', function(childSnapshot){
            var followersData = childSnapshot.val();

            if(followersData){
              console.log(followersData, "followersData of fa");

              // check for total followers info if not already acquired
              if(followersData.totalFollowers){
                totalFollowers = followersData.totalFollowers;

                // check for new followers Done update if total followers pre-acquired
                if(followersData.followersDone){
                  followersDone = followersData.followersDone;
                  $("#followerDoneCount").text(followersDone);
                  percent = (followersDone / totalFollowers) * 100;
                  $('.knob').val(percent).trigger('change');
                }
              }

              // extract data of package received and push them to globe.
              if (Array.isArray(followersData)){
                if(followersData.length > 1){
                  clearScene();
                  globe.addData(followersData, {format: 'magnitude'});
                  globe.createPoints();
                }
              }

              // on first start get user name and profile picture
              if(getProfile === false){
                getProfile = true;

                fc.once('value', function(data){
                  var theData = data.val();

                  if(theData.profile_picture){
                    // push profile picture to image placeholder
                    $("#user img").attr("src", theData.profile_picture);
                  }

                  if(theData["name"]){
                    // push name to place holder
                    $("#user span").text(theData["name"]);
                  }
                });
              }

              // Check for last followers to close connection
              if(followersData.totalFollowers && followersData.followersDone){
                if(followersData.totalFollowers === followersData.followersDone ){
                  Firebase.goOffline()
                  console.log("Went Offline!");
                }
              }

            }
          });
        };

        // first check for existing data
        fa.once('value', function(dataSnapshot){

          var fbSnapshot = dataSnapshot;  // extract data from Firebase in the form of a snapshot
          var cleanSnapshot = fbSnapshot.val();  //converts Firebase snapshot into readable data

          // check snapshot for data
          if(cleanSnapshot){
            // check snapshot for existing userName
            if(cleanSnapshot[userName]){

              // get user profile picture and name
              if(cleanSnapshot[userName].userData){
                // console.log("userData found");
                // sets profile photo if exist
                if(cleanSnapshot[userName].userData.profile_picture){
                  $("#user img").attr("src", cleanSnapshot[userName].userData.profile_picture);
                  getProfile = true;
                }

                // set profile name if exist
                if(cleanSnapshot[userName].userData.name){
                  // console.log("set user name text on start");
                  $("#user span").text(cleanSnapshot[userName].userData.name);
                }
                }

              // check snapshot for existing data
              if(cleanSnapshot[userName].pureData){
                // check for followers directory
                if(cleanSnapshot[userName].pureData.followers){
                  // check for total totalFollowers figure
                  if(cleanSnapshot[userName].pureData.followers.totalFollowers){
                    // set totalFollowers figure
                    totalFollowers = cleanSnapshot[userName].pureData.followers.totalFollowers;
                    // check for total followersDone figure
                    if(cleanSnapshot[userName].pureData.followers.followersDone){
                      // set followersDone figure
                      followersDone = cleanSnapshot[userName].pureData.followers.followersDone;
                      $("#followerDoneCount").text(totalFollowers);  // edit dial subtext info
                      percent = (followersDone / totalFollowers) * 100;
                      $('.knob').val(percent).trigger('change');  // modify dial to have that figure
                    }
                  }
                }

                // then inject it back into the globe
                globe.addData(cleanSnapshot[userName].pureData.data, {format: 'magnitude'});
                globe.createPoints();
                // globe.animate();
                goLive();
                console.log("gone live");

              // if no status then that means that the data has not completely downloaded
              } else {
                // opens a listening port to Firebase to update data on the globe.
                console.log("skipped first check");
                goLive();
              }
            } else {
              // opens a listening port to Firebase to update data on the globe.
              console.log("skipped first check");
              goLive();
            }
          } else {
            // opens a listening port to Firebase to update data on the globe.
            console.log("skipped first check");
            goLive();
          }
        });

      }

      runFirebase();

      // hides all the script from DOM
      $( document ).ready(function() {
        $( '#toHide' ).remove();
      });
    </script>
  </div>

  <script type="text/javascript" src="../../views/js/underscore.js"></script>
  </body>

</html>
