<!DOCTYPE HTML>
<html lang="en">
  <head>
    <title>WebGL Globe</title>
    <meta charset="utf-8">
    <link rel="stylesheet" type="text/css" href="../views/style.css" media="all">
  </head>
  <body>

  <div id="container"></div>

  <div id="title">
    FanScape
    <form id="username-form">
      <input type="text" name="message" id="message" value="jules_moretti"/>
      <button type="submit" id="button">Submit</button>
    </form>
  </div>

  <script type="text/javascript" src="/node_modules/jquery/dist/jquery.min.js"></script>
  <script type="text/javascript" src="/views/third-party/Detector.js"></script>
  <script type="text/javascript" src="/views/third-party/three.min.js"></script>
  <script type="text/javascript" src="/views/third-party/Tween.js"></script>
  <script type="text/javascript" src="/views/globe.js"></script>
  <script type='text/javascript' src='https://cdn.firebase.com/js/client/1.0.15/firebase.js'></script>

  <script type="text/javascript">
    /////////////////////////////////////////
    // TODO - figure out a better way to store data and make sure that magnitude is accurate and live
    // Implement a date picker function
    // Implement a status bar for the gathering of followers
    // add authentication for Instagram
    /////////////////////////////////////////

    var userName;  // holds the user name on retrieval
    var cleanSnapshot;  // holds on start a copy of the data on Firebase
    var geoTaggedFollowersCount = 0;  // keeps a tally on the number of followers that has geotagged data
    var todayUserData = [];  // from the snapshot retrieves existing data if any

    // generates todays date
    var date = function(){
      var d = new Date();
      return d.getUTCFullYear()+"-"+d.getUTCMonth()+"-"+d.getUTCDate();
    }();

    var container = document.getElementById( 'container' );  // Where to put the globe?
    var globe = new DAT.Globe( container );  // Make the globe
    globe.createPoints();  // Create the geometry
    globe.animate();  // Begin animation


    // takes obj Data and filters it down to an array that has an averaged out magnitude
    var crossRef = function(data, magnitude){
      var result = [];
      var obj = {};

      for (var i = 0; i < data.length; i++) {
        var pair = JSON.stringify([(data[i]),(data[i+1])]);

        if (obj[pair]){
          obj[pair] = obj[pair] + magnitude;
        } else {
          obj[pair] = magnitude;
        }
        i++;
      };

      for(var i in obj){
        var temp = JSON.parse(i);
        temp.push(obj[i]);
        result = result.concat(temp);
      };

      return result;
    }

    // start Firebase lookup and initiation if needed
    var runFirebase = function(){
      var fa = new Firebase('https://fanscape.firebaseio.com/'+userName+'/locations/'+date);
      var fb = new Firebase('https://fanscape.firebaseio.com/');

      // opens a live feed to Firebase and listens for new child + add those live.
      var goLive = function(){
        fa.on('child_changed', function(childSnapshot){
          var followersData = childSnapshot.val();
          for (var i in followersData.data) {
            var rawData = followersData.data[i];
          }
          globe.addData(crossRef(rawData, 0.01), {format: 'magnitude'});
          globe.createPoints();
          globe.animate();
        });
      };

      // check for existing data
      fb.once('value', function(dataSnapshot){

        var fbSnapshot = dataSnapshot;  // extract data from Firebase in the form of a snapshot
        var cleanSnapshot = fbSnapshot.val();  //converts Firebase snapshot into readable data

        // check snapshot for data
        if(cleanSnapshot){
          // check snapshot for existing userName
          if(cleanSnapshot[userName]){
            // check snapshot for existing locations
            if(cleanSnapshot[userName].locations){
              // check snapshot for existing date
              if(cleanSnapshot[userName].locations[date]){
                // check snapshot to see if the on-line data has been fully extracted
                if(cleanSnapshot[userName].locations[date].status){
                  //sort through the extracted data and get each followers.
                  for (var i in cleanSnapshot[userName].locations[date]){
                    geoTaggedFollowersCount++;  // Keep track of the number of followers with geo tagged data.
                    // sorts through each paginated data and push it to today UserData
                    for (var j in cleanSnapshot[userName].locations[date][i].data){
                      todayUserData = todayUserData.concat(cleanSnapshot[userName].locations[date][i].data[j]);
                    }
                  }
                  // take the gathered and ordered data and filter through it to determine the magnitude
                  // then inject it back into the globe
                  globe.addData(crossRef(todayUserData, 0.01), {format: 'magnitude'});
                  globe.createPoints();
                  globe.animate();
                // if no status then that means that the data has not completely downloaded
                } else {
                  //sort through the extracted data and get each followers.
                  for (var i in cleanSnapshot[userName].locations[date]){
                    geoTaggedFollowersCount++;  // Keep track of the number of followers with geo tagged data.
                    // sorts through each paginated data and push it to today UserData
                    for (var j in cleanSnapshot[userName].locations[date][i].data){
                      // check to see if data has been completely downloaded for specific follower
                      if (cleanSnapshot[userName].locations[date][i].status){
                        todayUserData = todayUserData.concat(cleanSnapshot[userName].locations[date][i].data[j]);
                      }
                    }
                  }
                  // take the gathered and ordered data and filter through it to determine the magnitude
                  // then inject it back into the globe
                  globe.addData(crossRef(todayUserData, 0.01), {format: 'magnitude'});
                  globe.createPoints();
                  globe.animate();
                  // opens a listening port to Firebase to update data on the globe.
                  goLive();
                }
              } else {
                goLive();
              }
            } else {
              goLive();
            }
          } else {
            goLive();
          }
        } else {
          goLive();
        }
      });
    }

    // send ajax request to server with the current user name
    var loadXMLDoc = function(){
      // Using the core $.ajax() method
      $.ajax({
          // the URL for the request
        url: "/globe?user="+ $("#message").val(),

        // the data to send (will be converted to a query string)
        // data: {
        //     user: 123
        // },

        // whether this is a POST or GET request
        type: "GET",

        // the type of data we expect back
        dataType : "json",

        // code to run if the request succeeds;
        // the response is passed to the function
        success: function( json ) {
            console.log(json);  // yolo - message from server...
            console.log("success Request");

            // console.log(data, "The data");  // [0, 0, 0.1, 500, 50, 0.1]
            // globe.addData(json, {format: 'magnitude'});
            // $( "<h1/>" ).text( json.title ).appendTo( "body" );
            // $( "<div class=\"content\"/>").html( json.html ).appendTo( "body" );
        },

        // code to run if the request fails; the raw request and
        // status codes are passed to the function
        error: function( xhr, status, errorThrown ) {
            console.log( "Sorry, there was a problem!" );
            console.log( "Error: " + errorThrown );
            console.log( "Status: " + status );
            console.dir( xhr );
        },

        // code to run regardless of success or failure
        complete: function( xhr, status ) {
            console.log( "The request is complete!" );
        }
      });
    }


    $(function () {
      $("#username-form").on('submit', function (e) {
        userName = $("#username-form #message").val();
        e.preventDefault();
        runFirebase();
        loadXMLDoc();
        return false;
      });
    });

  </script>

  </body>

</html>
